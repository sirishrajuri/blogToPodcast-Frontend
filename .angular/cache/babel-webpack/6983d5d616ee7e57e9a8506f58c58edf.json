{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport * as i1 from '@angular/router';\nimport { of, pipe } from 'rxjs';\nimport { map, take, switchMap } from 'rxjs/operators';\nimport * as i2 from '@angular/fire/auth';\nimport { user } from '@angular/fire/auth';\nimport { registerVersion } from 'firebase/app';\nimport { VERSION } from '@angular/fire';\nconst loggedIn = map(user => !!user);\n\nclass AuthGuard {\n  constructor(router, auth) {\n    this.router = router;\n    this.auth = auth;\n\n    this.canActivate = (next, state) => {\n      const authPipeFactory = next.data.authGuardPipe || (() => loggedIn);\n\n      return user(this.auth).pipe(take(1), authPipeFactory(next, state), map(can => {\n        if (typeof can === 'boolean') {\n          return can;\n        } else if (Array.isArray(can)) {\n          return this.router.createUrlTree(can);\n        } else {\n          // TODO(EdricChan03): Add tests\n          return this.router.parseUrl(can);\n        }\n      }));\n    };\n  }\n\n}\n\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.Auth));\n};\n\nAuthGuard.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'any'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthGuard, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'any'\n    }]\n  }], function () {\n    return [{\n      type: i1.Router\n    }, {\n      type: i2.Auth\n    }];\n  }, null);\n})();\n\nconst canActivate = pipe => ({\n  canActivate: [AuthGuard],\n  data: {\n    authGuardPipe: pipe\n  }\n});\n\nconst isNotAnonymous = map(user => !!user && !user.isAnonymous);\nconst idTokenResult = switchMap(user => user ? user.getIdTokenResult() : of(null));\nconst emailVerified = map(user => !!user && user.emailVerified);\nconst customClaims = pipe(idTokenResult, map(idTokenResult => idTokenResult ? idTokenResult.claims : []));\n\nconst hasCustomClaim = claim => pipe(customClaims, map(claims => claims.hasOwnProperty(claim)));\n\nconst redirectUnauthorizedTo = redirect => pipe(loggedIn, map(loggedIn => loggedIn || redirect));\n\nconst redirectLoggedInTo = redirect => pipe(loggedIn, map(loggedIn => loggedIn && redirect || true));\n\nclass AuthGuardModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'auth-guard');\n  }\n\n}\n\nAuthGuardModule.ɵfac = function AuthGuardModule_Factory(t) {\n  return new (t || AuthGuardModule)();\n};\n\nAuthGuardModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AuthGuardModule\n});\nAuthGuardModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [AuthGuard]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthGuardModule, [{\n    type: NgModule,\n    args: [{\n      providers: [AuthGuard]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AuthGuard, AuthGuardModule, canActivate, customClaims, emailVerified, hasCustomClaim, idTokenResult, isNotAnonymous, loggedIn, redirectLoggedInTo, redirectUnauthorizedTo };","map":{"version":3,"sources":["/Users/apple/Downloads/US_IT_Project/test/blogToPodcast-Frontend/node_modules/@angular/fire/fesm2015/angular-fire-auth-guard.js"],"names":["i0","Injectable","NgModule","i1","of","pipe","map","take","switchMap","i2","user","registerVersion","VERSION","loggedIn","AuthGuard","constructor","router","auth","canActivate","next","state","authPipeFactory","data","authGuardPipe","can","Array","isArray","createUrlTree","parseUrl","ɵfac","Router","Auth","ɵprov","type","args","providedIn","isNotAnonymous","isAnonymous","idTokenResult","getIdTokenResult","emailVerified","customClaims","claims","hasCustomClaim","claim","hasOwnProperty","redirectUnauthorizedTo","redirect","redirectLoggedInTo","AuthGuardModule","full","ɵmod","ɵinj","providers"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport * as i1 from '@angular/router';\nimport { of, pipe } from 'rxjs';\nimport { map, take, switchMap } from 'rxjs/operators';\nimport * as i2 from '@angular/fire/auth';\nimport { user } from '@angular/fire/auth';\nimport { registerVersion } from 'firebase/app';\nimport { VERSION } from '@angular/fire';\n\nconst loggedIn = map(user => !!user);\nclass AuthGuard {\n    constructor(router, auth) {\n        this.router = router;\n        this.auth = auth;\n        this.canActivate = (next, state) => {\n            const authPipeFactory = next.data.authGuardPipe || (() => loggedIn);\n            return user(this.auth).pipe(take(1), authPipeFactory(next, state), map(can => {\n                if (typeof can === 'boolean') {\n                    return can;\n                }\n                else if (Array.isArray(can)) {\n                    return this.router.createUrlTree(can);\n                }\n                else {\n                    // TODO(EdricChan03): Add tests\n                    return this.router.parseUrl(can);\n                }\n            }));\n        };\n    }\n}\nAuthGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AuthGuard, deps: [{ token: i1.Router }, { token: i2.Auth }], target: i0.ɵɵFactoryTarget.Injectable });\nAuthGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AuthGuard, providedIn: 'any' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AuthGuard, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'any'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.Auth }]; } });\nconst canActivate = (pipe) => ({\n    canActivate: [AuthGuard], data: { authGuardPipe: pipe }\n});\nconst isNotAnonymous = map(user => !!user && !user.isAnonymous);\nconst idTokenResult = switchMap((user) => user ? user.getIdTokenResult() : of(null));\nconst emailVerified = map(user => !!user && user.emailVerified);\nconst customClaims = pipe(idTokenResult, map(idTokenResult => idTokenResult ? idTokenResult.claims : []));\nconst hasCustomClaim = (claim) => pipe(customClaims, map(claims => claims.hasOwnProperty(claim)));\nconst redirectUnauthorizedTo = (redirect) => pipe(loggedIn, map(loggedIn => loggedIn || redirect));\nconst redirectLoggedInTo = (redirect) => pipe(loggedIn, map(loggedIn => loggedIn && redirect || true));\n\nclass AuthGuardModule {\n    constructor() {\n        registerVersion('angularfire', VERSION.full, 'auth-guard');\n    }\n}\nAuthGuardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AuthGuardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAuthGuardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AuthGuardModule });\nAuthGuardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AuthGuardModule, providers: [AuthGuard] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AuthGuardModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [AuthGuard]\n                }]\n        }], ctorParameters: function () { return []; } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AuthGuard, AuthGuardModule, canActivate, customClaims, emailVerified, hasCustomClaim, idTokenResult, isNotAnonymous, loggedIn, redirectLoggedInTo, redirectUnauthorizedTo };\n"]},"metadata":{},"sourceType":"module"}